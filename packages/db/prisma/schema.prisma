// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") //this has to be in an env file in the same directory as the schema for the schema to pick it up.
  directUrl = env("DIRECT_DATABASE_URL")
}

model OAuthAccount {
  providerId     String
  providerUserId Float  @unique
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        String

  @@id([providerId, providerUserId])
}

model AdminOAuthAccount {
  providerId     String
  providerUserId Float  @unique
  admin          Admin  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id       String

  @@id([providerId, providerUserId])
}

model User {
  id              String         @id
  avatar          String?
  username        String         @unique
  hashed_password String         @default("") //default is an empty string because providers like google do not automatically supply a password to be put in the db. But we do need this field for usrnm/pswrd login.
  email           String?        @unique
  courses         Course[]
  sessions        userSession[]
  OAuthAccount    OAuthAccount[]
}

model userSession {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //this has to be named `u`ser if it is to refernece `U`ser. If it were to reference `U`serAuth, it would have to be named `u`serAuth. Says the lucia docs, they also say it comes from prisma and they aren't gonna fix it bcoz they didn't do it. I personally don't see any problem.
}

model Admin {
  id              String              @id
  avatar          String?
  username        String              @unique
  hashed_password String              @default("")
  email           String?             @unique
  createdCourses  Course[] //One-to-many relationship with course
  sessions        AdminSession[]
  OAuthAccount    AdminOAuthAccount[]
}

model AdminSession {
  id        String   @id
  adminId   String
  expiresAt DateTime
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade) //this has to be named `a`dmin if it is to refernece `A`dmin.
}

model Course {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  imageLink   String?
  price       Decimal
  published   Boolean
  admin       Admin?  @relation(fields: [adminId], references: [id])
  adminId     String?
  users       User[]
}
